#!/bin/bash

#lib_install - Install various packages for setting up of FindnSecure version 4

selection=

#You need to be root to install packages 
if [ $(id -u) != "0" ]; then
    echo "Permission denied. Are you root?"
    exit 1
fi

#exit neatly in any situation - except for SIGKILL from outer space
trap clean_exit SIGHUP SIGINT SIGTERM

usage()
{
echo "usage: lib_install [[-h]]"
}

#rebuild packages index from sources
update_index()
{
sudo apt-get update
echo "Packages index updated.";
}

#upgrade all existing packages
upgrade_packages()
{
sudo apt-get -y upgrade
echo "Upgrade complete."
}

#install php packages
install_php_libs()
{
echo "Installing PHP packages..."
sudo apt-get install -y php5 php5-dbg php5-dev php5-common php5-recode php5-ldap php5-pspell php5-snmp php5-curl php5-xsl php5-xmlrpc php5-gmp php5-gd php5-pgsql php5-odbc php5-cli php5-sqlite php5-cgi php5-tidy libapache2-mod-php5 php5-mysql php5-json php5-mcrypt
echo "Installation of PHP packages complete."
}

#install MySQL Packages
install_mysql_libs()
{
echo "Installing MySQL packages..."
sudo apt-get install -y libdbd-mysql-perl libdbi-perl libmysqlclient-dev libmysqlclient18 librdf0 mysql-client mysql-client-5.5 mysql-client-core-5.5 mysql-common mysql-server mysql-server-5.5 mysql-server-core-5.5 rsyslog libmyodbc libmysql++-dev libmysql++3
echo "Installation of MySQL packages complete."
}

#install XRDP
install_xrdp()
{
echo "Installing XRDP..."
sudo apt-get install -y xrdp
echo "Installation of XRDP complete."
}

#install Ubuntu Desktop
install_ubuntu_desktop()
{
echo "Installing Ubuntu Desktop..."
sudo apt-get install -y ubuntu-desktop
echo "Installation of Ubuntu Desktop complete."
}

#install Screen
install_screen()
{
echo "Installing Screen..."
#change to /home directory before starting
cd $HOME

#get customized screen version and save to screenrc
wget spark-public.s3.amazonaws.com/startup/code/screenrc -O .screenrc

echo "Installation of Screen complete."
}

#install synaptic package manager
install_synaptic()
{
echo "Installing Synaptic Package Manager..."
sudo apt-get install -y synaptic
echo "Installation of Synaptic Package Manager complete."
}

#install axel
install_axel()
{
echo "Installing Axel..."
sudo apt-get install -y axel
echo "Installation of Axel complete."
}

#apply vnc license on Ubuntu, after VNC server has been installed
apply_vnc_license()
{
echo "Applying VNC License..."
vnclicense -add 6MG9J-XQNEM-MUBVR-4ZNSZ-2TMLA
}

#add Cron jobs
add_cron_jobs()
{
echo "Adding CRON jobs..."

#list CRON jobs
job_1='0 * * * * wget -T 0 http://127.0.0.1/php/getpage.php?mode=autoHandler'
job_2='0 0 1 * * mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -pembarc mysql'
job_3='0 0 * * * php /var/www/php/updateOdometer.php'

#fetch all previous cron jobs
crontab -l > cron_dump

dump_job_1=$(cat cron_dump | sed "s/\s[\*]*//g" | grep $(echo "$job_1" | sed "s/\s[\*]*//g"))
if [ "$dump_job_1" = "" ]; then
echo "$job_1" >> cron_dump
echo "CRON job $job_1 added successfully."
else
echo "CRON job $job_1 already exists."
fi

dump_job_2=$(cat cron_dump | sed "s/\s[\*]*//g" | grep $(echo "$job_2" | sed "s/\s[\*]*//g"))
if [ "$dump_job_2" = "" ]; then
echo "$job_2" >> cron_dump
echo "CRON job $job_2 added successfully."
else 
echo "CRON job $job_2 already exists."
fi

dump_job_3=$(cat cron_dump | sed "s/\s[\*]*//g" | grep $(echo "$job_3" | sed "s/\s[\*]*//g"))
if [ "$dump_job_3" = "" ]; then
echo "$job_3" >> cron_dump
echo "CRON job $job_3 added successfully."
else 
echo "CRON job $job_3 already exists."
fi

#add all jobs to crontab
crontab cron_dump
}

#start UFW and allow optional required ports
start_ufw()
{
echo "Starting UNIX Firewall..."
ufw enable
ufw allow 22
ufw allow 80
ufw allow 5901
ufw allow 10000
ufw allow 21000
echo "UNIX Firewall started. Port Exceptions: 22,80,5901,10000,21000."
}

#enable root login in GNOME mode
root_login_gnome()
{
echo "Enabling root login..."
sudo sh -c 'echo "greeter-show-manual-login = true" >> /etc/lightdm/lightdm.conf'
sudo sh -c 'echo "allow-guest = false" >> /etc/lightdm/lightdm.conf'
echo "Root login enabled."
}

#create databases, required for FindnSecure v4
create_databases()
{
echo "Creating databases..."
echo "CREATE DATABASE IF NOT EXISTS fnsv4;" > db_create.sql
echo "CREATE DATABASE IF NOT EXISTS fnsraw;" >> db_create.sql
echo "CREATE DATABASE IF NOT EXISTS geofnsv4;" >> db_create.sql

#prompt for mysql username and password
username=""
password=""
echo -n "Please enter MySQL username:"
read username

#if username is not entered, assume root
if [ "$username" = "" ]; then
username="root"
echo "No username provided, assuming user root."
fi

echo ""

echo -n "Please enter MySQL password:"
#reading password in silent mode, so that password characters are not echoed back on screen
read -s password
echo ""
#no check for password supplied is available yet

$(mysql -u"$username" -p"$password" < db_create.sql)

echo "Databases created."
}

#upgrade linux distribution
upgrade_dist()
{
echo "Starting upgrade of Linux distribution..."
sudo apt-get -y dist-upgrade
echo "Linux distribution upgraded successfully."
}

# install phpMyAdmin
install_phpMyAdmin()
{
echo "Starting installation of phpMyAdmin..."
sudo apt-get install -y phpmyadmin
echo "phpMyAdmin was installed successfully.\nRestarting Apache2 server now..."
sudo service apache2 restart
echo "Apache2 server was restarted successfully."
}

#exit program neatly - exit housekeeping
clean_exit()
{
#remove file created by method add_cron_jobs
if [ -f "cron_dump" ]; then
rm -f cron_dump
fi

#remove file created by method create_databases
if [ -f "db_create.sql" ]; then
rm -f db_create.sql
fi
exit 0
}

while [ "$1" != "" ]; do
case $1 in
-h | --help ) usage; exit;;
esac
shift
done

until [ "$selection" = "0" ]; do
echo "
1 - Update Packages Index
2 - Upgrade Packages
3 - Install PHP Packages
4 - Install MySQL Packages
5 - Install XRDP
6 - Install Ubuntu Desktop
7 - Install Screen
8 - Install Synaptic Package Manager
9 - Install Axel
10 - Apply VNC License
11 - Add CRON Jobs
12 - Start UNIX Firewall
13 - Enable Login using root (GNOME)
14 - Create Databases
15 - Upgrade Linux Distribution
16 - Install phpMyAdmin
0 - Exit
"
echo -n "Enter Selection: "
read selection
echo ""

case $selection in
1 ) update_index ;;
2 ) upgrade_packages ;;
3 ) install_php_libs ;;
4 ) install_mysql_libs ;;
5 ) install_xrdp ;;
6 ) install_ubuntu_desktop ;;
7 ) install_screen ;;
8 ) install_synaptic ;;
9 ) install_axel ;;
10 ) apply_vnc_license ;;
11 ) add_cron_jobs ;;
12 ) start_ufw ;;
13 ) root_login_gnome ;;
14 ) create_databases ;;
15 ) upgrade_dist ;;
16 ) install_phpMyAdmin ;;
0 ) clean_exit ;;
* ) echo "Invalid Input";
esac
done
